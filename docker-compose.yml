services:
  broker:
    image: apache/kafka:4.0.0
    hostname: broker
    container_name: broker
    ports:
      - 29092:29092
      - 9998:9998
    volumes:
      - ./jmx-exporter/kafka-config.yml:/config/kafka.yml
      - ./jmx-exporter/jmx_prometheus_javaagent-1.3.0.jar:/jmx_exporter.jar
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OPTS: >-
        -javaagent:/jmx_exporter.jar=9998:/config/kafka.yml
    networks:
      - monitoring
  kafka-exporter:
    container_name: kafka-exporter
    image: danielqsj/kafka-exporter:v1.8.0
    entrypoint: sh -c
    command: >
      "while ! nc -z broker 9092; do
        echo 'Waiting for Kafka...';
        sleep 2;
      done;
      kafka_exporter --kafka.server=broker:9092"
    depends_on:
      - broker
    ports:
      - 9308:9308     
    networks:
      - monitoring
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.4.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - broker
    ports:
      - 9090:9090
    networks:
      - monitoring
  grafana:
    container_name: grafana
    image: grafana/grafana:12.0.1
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=password
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    networks:
      - monitoring
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:v8
    ports:
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
networks:
  monitoring:
    driver: bridge
